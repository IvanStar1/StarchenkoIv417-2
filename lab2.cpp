#include <iostream> 
#include <locale.h> 
#include <iomanip> 
#include <bitset>

// КОНСТРУКЦИИ ЯЗЫКА C/C++
    
int main()
{
    setlocale(LC_ALL, "Russian");

    // 1. Условные переходы

    // 1.1 Оператор if и if...else...

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	int salary = 120000;
	bool has_education = true; 
	if ((salary < 150000) /*=true*/ && has_education /*в скобках должна быть логическая переменная или условие, выдающее true или false*/)
    {
		std::cout << "Зашли под if!" << std::endl;
	// всё, что внутри скобок if выполняется если условие в круглых скобках равно true
    }

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	std::string name;
	std::cout << "Введите ваше имя:";
	std::cin >> name;
	if (name == "Иван" /*false= если имя не равно "Иван"*/)
    {
	    std::cout << "Зашли под второй if!" << std::endl;
    }
	else
    {
	    std::cout << "Зашли под else!" << std::endl;
    }

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 1.2 Оператор switch...case...default
	
	int type_of_creditor; // 1 = "physical" 
	                      // 2 = "small_business" 
	                      // 3 = "medium_business" 
		                  // 4 = "large_business"

	// !!! прописать ввод цифры - кода клиента здесь в type_of_creditor
	std::cin >> type_of_creditor;
	switch (type_of_creditor/*переменная, которая подлежит сравнению*/)
	{
	case  1/*physical*/:
		std::cout << "Тип клиента - \"physical\"" << std::endl;
		break;
	case  2/*small_business*/:
		std::cout << "Тип клиента - \"small_business\"" << std::endl;
		break;
	case  3/*medium_business*/:
		std::cout << "Тип клиента - \"medium_business\"" << std::endl;
		break;
	case  4/*large_business*/:
		std::cout << "Тип клиента - \"large_business\"" << std::endl;
		break;
	default:    // действия, которые выполняются во всех прочих случаях
		break;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 1.3 Тернарный оператор
	int c = 10;
	// кратко условный переход, можно даже записать в одну строку if (c <5) {} else {}
	// или в виде тернарного опеатора (/*условие*/)?(/*ветка, еслиу условие==true*/):(/*ветка, если условие==false*/)
	// как и if, его можно употреблять без второй ветки (без else и без :)
	(c < 5)
		? (std::cout << "Тернарный оператор true" << std::endl/*Операторы, если true*/)
		: (std::cout << "Тернарный оператор false" << std::endl/*Операторы, если false*/);

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 1.4 Оператор безусловного перехода goto
	// в современной разработке стараются не применять, т.к. это как минимум уменьшает читаемость кода
	// синтаксис:
	// в нужном месте программы создаётся так называемая метка 
    /*
    *        lbl_1: // идентификатор (название) и двоеточие - объявление метки  
    *	     c++;
    *	     std::cout << "1.4. Демонстрация goto. c=" << c << std::endl;
    *	     goto lbl_1;
    * 
    *                       ЭТО КОД ДЛЯ БЕСКОНЕЧНОГО ПРИБАВЛЕНИЯ
    *
    */

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	lbl_1:
	c++;
	std::cout << "1.4. Демонстрация goto. c=" << c << std::endl;
	if (c == 15) { goto lbl_exit; }
	goto lbl_1;
	lbl_exit:
	std::cout << "Вышли из цикла goto" << std::endl;

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 2. Конструкции цикла

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 2.1 Счётный цикл for и операторы continue и break

	for (int i = 0/*начальное значение переменной-счётчика*/;
		i < 7; /*условие прололжения, пока оно true - цикл продолжается*/
		i++/*повторяющийся оператор, чаще всего - уменьшение или увеличение счётчика*/)
	{
		//.. код который нужно повторять, пока длится цикл (пока длится условие продолжения)
		// заполнить распечаткой самостоятельно к 7 октября
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 2.2 Цикл с пред-условием while 
	while (true/* задание: придумать и прописать условие*//*условие пока оно == true, цикл выполняется*/)
	{
		// задание: придумать и прописать условие
		// заполнить распечаткой самостоятельно к 7 октября
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------

    // 2.3 Цикл с пост-условием do...while 
	// самый первый заход в цикл выполняется всегда (т.к. проверка условия выполняется после тела цикла)

	do {
		//.. код который нужно повторять, пока длится цикл (пока длится условие продолжения)
		// заполнить распечаткой самостоятельно к 7 октября
	} while (/* задание: придумать и прописать условие */ /*условие пока оно == true, цикл выполняется*/);

    // внутри большинства программ, графических приложений и браузеров, которые работают долгое время и не завершаются сами по себе, прописан бесконечный цикл

/* Основы GIT:
Ссылка: https://git-scm.com/
другие CKB: GIT, Mercural, SVN и др.
если кратко: как только разработчику необходимо сделать "снимок" текущих файлов своего проекта (версию) он вводит в git команду и git вместо простого копирования папок и файлов определяет изменение текущей версии файла относительно предыдущей и записывает разницу, таким образом git ведёт историю версий всех файлов в очень компактном виде
сейчас помимо просто хранения версий git используется также для командной работы, хранения резервной копии, для командной работы над одной и той же кодовой базой, для публикации открытого кода и тд
файлы проекта вместе со служебными файлами git называются репозиторием
если репозиторий размещён на локальной машине, то он локальный
если репозитоирй размещён в сети, то он удалённый
сначала создаётся локальный репозиторий, с ним проводится работа по добавлению файлов, фиксированию версий, созданию и слиянию веток
затем результаты можно отправить (синхронизировать) с удалённым репозиторием
чтобы завести репозиторий в каталоге необходимо:
1. открыть консоль в корневом каталоге проекта
Как открыть консоль: зайти в папку, зажать Shift, ПКМ, открыть окно команд ( powershell) или в адресной строке папке написать cmd
2. написать в cmd "git init"
3. создан пустой репозиторий, ни один файл не отслеживается и версии не могут быть созданы, необходимо добавить файлы в список отслеживания git
4. нужно написать git add *.cpp
*/

std::system("pause"); // вызов функции system() из стандартной библиотеки
	return 0;
}
